// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders latest 10 posts 1`] = `
"
  <?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
  <rss version=\\"2.0\\" xmlns:atom=\\"http://www.w3.org/2005/Atom\\">
    <channel>
      <title>Jake Trent Articles</title>
      <link>https://jaketrent.com</link>
      <description>Articles on technology</description>
      <language>en-us</language>
    </channel>
    
  <item>
    <link>https://jaketrent.com/post/curse-knowledge-writing</link>
    <guid isPermaLink=\\"true\\">https://jaketrent.com/post/curse-knowledge-writing</guid>
    <pubDate>2021-1-29</pubDate>
    <title>Writing with the Curse of Knowledge</title>
    <description><p>The curse of knowledge may create obstacles to us writing something useful for our reader. We may assume that others know exactly what we know and that they still need to learn certain things. This might be mismatched with their real needs.</p><h2 id=\\"knowing-where-to-start\\">Knowing where to start</h2><p>In technical writing, we try to guide someone from the beginning to the end, with proficiency in some task as the end goal. </p><p>Perhaps we don’t start precisely at zero, assuming our reader knows nothing. But we start at some lower-level starting point. But where do we start? People start from different points of knowledge. And it’s hard to hedge all our bets or give enough caveats.</p><p>Prefer restating a few things at the risk of being obvious. People like a review. It’s good to create the context and foundation for the more essential points we’re about to make.</p><h2 id=\\"knowing-where-to-start-knowing-where-to-end\\">Knowing where to end</h2><p>Ending can be difficult, but should be less so. After all, when we set out to write, the thing we’re trying to accomplish should be well-understood by us. It’s the reason we’re writing.</p><p>Precisely point out what we will be able to do by the end if we follow the steps to conclusion. Point out what we will not be able to do because of limitations. We might also point to continuing or alternate paths that we don’t pursue in the present writing. We could point to assistive resources for continued learning.</p><h2 id=\\"knowing-where-to-start-knowing-the-level-of-detail\\">Knowing the level of detail</h2><p>Like knowing where to start, it can be difficult to know how much hand holding through each step someone needs. It might be hard to know how specific to get on each step and how much to skip between each step.</p><p>Make a judgement call between verbosity and terseness, focused on readability toward the end goal. Only favor adding detail when essential complexity seems to require it. Once we decide on a resolution, stick with it from beginning to end.</p><h2 id=\\"knowing-where-to-start-not-leaving-anything-out\\">Not leaving anything out</h2><p>When there are lots of steps or related concepts, it can be easy to leave something out. Our reader will jump into the text and think, “Wow, where did that come from?” or “What does that mean? I’ve never heard of that before.” Mentioning things out of order will have the same effect.</p><p>Re-read and look for logical jumps where we may need to fill in steps or facts that are foundational to next steps.</p><p>And so in this curse of knowledge article, did I start in the wrong place?  Did I stop before I got to the point of usefulness? Did I leave stuff out? Definitely.</p></description>
  </item>

  <item>
    <link>https://jaketrent.com/post/more-managers-more-priorities</link>
    <guid isPermaLink=\\"true\\">https://jaketrent.com/post/more-managers-more-priorities</guid>
    <pubDate>2021-1-29</pubDate>
    <title>More Manager, More Priorities</title>
    <description><p>If we’re not careful, the number of priorities will grow directly with the number of managers. Since a singular priority is the most useful kind of priority, this is a bad thing. </p><div><!--more-->
</div><h2 id=\\"growing-managers,-growing-priorities\\">Growing managers, growing priorities</h2><p>It might not be universal, I can’t say. But it sure is observable and repeatable. If you hire more managers, you’ll get more things to do – more competing priorities. </p><p>Perhaps this is related to the common pitfall of solving most organizational problems with hiring. Perhaps its just the easiest management strategy. Things seem to tend that way.</p><h2 id=\\"growing-managers,-growing-priorities-managers-manage…-something\\">Managers manage… something</h2><p>Managers have to have something to manage, something to own. Else, why are they there? If it’s just to look after people, they’ll be a micromanager in no time and make their employees nervous and annoyed. So, they’ve got to have something to do. </p><p>And managers, like many workers, are often evaluated based on their impact. If they find a big initiative to take on, it’ll show… initiative.  But it’s easy to confuse that busyness with helpful motion. </p><p>And we all like new and shiney things. There’s the ever-present promise of the future. It will be solved as soon as we build the next big thing.</p><h2 id=\\"growing-managers,-growing-priorities-managers-need-workers\\">Managers need workers</h2><p>So, new managers lead to new initiatives, and those things need a new team. These are connected. One predicts the other. Getting manager heavy, then, can quickly overburden the system.</p><p>So why were the managers hired in the first place? Probably because the company was trying to do too much. The problem is circular.</p><h2 id=\\"growing-managers,-growing-priorities-real-priorities\\">Real priorities</h2><p>We have to choose what’s really important to us – to the business. It has to be strategic. The best priority is one priority. We work on it until it is delivered. It is, after all, the thing that will be of greatest value. There aren’t two of those. If we delivered on this priority, it’d be the best possible thing we could do.</p><p>This isn’t easy. Making a decision to do one thing means precluding another. And envisioning that priority usefully is a challenge as well. It has to be more concrete than the “Be the best at X by the end of the year”. </p><p>Once the strategic priority is concrete enough to act under, the initiatives that spawn as children from managers and teams don’t have the be different or separate. They can directly contribute to the one overall priority. Instead of doing one of everything, we can get everyone working on one thing. If there are a bunch of managers with teams that don’t seem to be able to contribute meaningfully, that’s another choice that having a clear priority helps make. And it will be painful to reverse this trend.</p><h2 id=\\"growing-managers,-growing-priorities-caveats\\">Caveats</h2><p>Of course, there are exceptions. What about the value of diversifying the bets we take in business? What about the teams that need to keep infrastructure working for all these iniatives that rely on it? What about span of control limitations for a manager? Yes, exceptions. But they should be seen that way. Or other solutions besides increasing the number of managers should be examined. It’s too easy to have too many priorities and then too many managers and then too many initiatives, teams, and a system that can’t keep up with everything it’s committed to do.</p><p>A bit rambly because this touches tons of issues? Yes.</p><p>Hard problems? Yes.</p><p>Perhaps the first priority is to solve this problem:  Make a single, concrete priority and organize such that every manager and team works on it.</p></description>
  </item>

  <item>
    <link>https://jaketrent.com/post/automate-separate-commits</link>
    <guid isPermaLink=\\"true\\">https://jaketrent.com/post/automate-separate-commits</guid>
    <pubDate>2021-1-14</pubDate>
    <title>Automate Separate Commits in Bash</title>
    <description><p>Here’s a bash script for running a lot of separate git commits.</p><div><!--more-->
</div><p>Don’t you feel like a 10th level terminal mage whenever you get any sort of bash script to run?  Bash is nice because it’ll usually just work in the terminal. You don’t need another runtime to get it to work. But wow, is it not a skill that I use often, and it has sharp edges I get myself caught on every time.</p><p>In this example, I had a monorepo that relies on conventional commit using commitlint to generate change logs. Thus, changes for every package had to be committed separately. </p><p>First, I made <a href=\\"/post/search-replace-multiple-files-macos\\">changes over multiple files</a> using a method similar to one I’ve written about before.</p><p>Then, I made and ran this script:</p><pre><code class=\\"language-bash\\"><span class=\\"token keyword\\">for</span> <span class=\\"token constant\\">FILE</span> <span class=\\"token keyword\\">in</span> <span class=\\"token function\\">$</span><span class=\\"token punctuation\\">(</span>git diff <span class=\\"token operator\\">--</span>name<span class=\\"token operator\\">-</span>only<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token keyword\\">do</span>
  <span class=\\"token constant\\">PACKAGE</span><span class=\\"token operator\\">=</span><span class=\\"token template-string\\"><span class=\\"token template-punctuation string\\">\`</span><span class=\\"token string\\">echo $FILE | sed \\"s|packages/\\\\(.*\\\\)/src.*|\\\\1|\\"</span><span class=\\"token template-punctuation string\\">\`</span></span>
  git add <span class=\\"token string\\">\\"packages/$PACKAGE\\"</span>
  git commit <span class=\\"token operator\\">-</span>m <span class=\\"token string\\">\\"refactor($PACKAGE): message about the thing done to all packages\\"</span>
done</code></pre><p>So, what’s here?</p><ul><li>The for loop should look pretty familiar. Be careful to include that semicolon. The body can be multi-line, no problem.</li><li>The thing being looped over is a list of files that have changed. Using the <code>--name-only</code> flag, only the file names are listed, not the other instructional text from git.</li><li><code>PACKAGE</code> is being defined here as another variable. Don’t try to put spaces around that assignment operator. </li><li>The backticks for the command in the variable declaration are one way of surrounding a command. The dollar parenthesis in the for loop is another.</li><li>When you use a variable previously declared and want the value of it, you prepend the dollar sign, as in <code>$FILE</code>.</li><li>In the <code>sed</code> command, I’m using <code>|</code> pipes instead of the traditional forward slash. <code>sed</code> doesn’t care what you use for delimiters, and in this case pipes require fewer escapes on the forward slashes in the pattern.</li><li>The parenthesis in the pattern have to be escaped. This is odd, since this is the standard syntax for capture groups. Later, <code>\\\\1</code> represents the group.</li><li>And did you know that a <code>git commit</code> can have 2 messages?  One for the subject line: <code>-m</code>, and one for the body: <code>--message</code>.</li></ul><p>Amazing. See, 10th level terminal mage.</p></description>
  </item>

  <item>
    <link>https://jaketrent.com/post/keyboard-access-buttons-testing-library</link>
    <guid isPermaLink=\\"true\\">https://jaketrent.com/post/keyboard-access-buttons-testing-library</guid>
    <pubDate>2020-11-30</pubDate>
    <title>Keyboard Control of Buttons in Testing Library</title>
    <description><p>Make buttons controllable via the keyboard within test using testing-library.</p><div><!--more-->
</div><h2 id=\\"test-is-different-than-browser\\">Test is Different than Browser</h2><p>In the browser, we can focus a button and press enter, and the <code>onClick</code> handler is triggered, and all is good.  </p><p>In the test environment, it’s a different story.  Here, we’ll look at tests written for a React UI using <a href=\\"https://testing-library.com/docs/react-testing-library/intro/\\">@testing-library/react</a>.</p><h2 id=\\"test-is-different-than-browser-testing-library-peculiarities\\">Testing-library Peculiarities</h2><p>Testing-library is awesome. But it has some duplicate functionality for keyboard events that makes using it confusing. There are many threads describing what works for people, and the answers are all different.  Well, this is another one: here’s what worked for me; maybe it’ll help.</p><p><a href=\\"https://github.com/testing-library/user-event\\"><code>@testing-library/user-events</code></a> is preferred when possible because it more-closely models how the user interacts with your UI in the browser. In this case, however, its use is ill advised – it doesn’t work. To be clear: don’t use <code>userEvent.type(el, &#x27;{enter}&#x27;)</code>. Instead, use <code>fireEvent</code> from <a href=\\"https://github.com/testing-library/dom-testing-library\\"><code>@testing-library/dom</code></a>. Specifically, use <code>fireEvent.keyDown(el, { key: &#x27;Enter&#x27;, code: &#x27;Enter&#x27; })</code>.</p><h2 id=\\"test-is-different-than-browser-single-handler,-multiple-events\\">Single Handler, Multiple Events</h2><p>To get the “enter” keyboarding to work in the test environment, you’ll need to add an <code>onKeyDown</code> listener in addition to your usual <code>onClick</code>. Then point both listeners to the same handler (assuming you want both actions to do the same thing.). Then inside the handler, detect whether it’s a click or the kind of key you’re expecting before you run the logic for the handler.</p><pre><code class=\\"language-js\\"><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">handleButtonEvent</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">evt</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>
  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>
    evt<span class=\\"token punctuation\\">.</span>type <span class=\\"token operator\\">===</span> <span class=\\"token string\\">'click'</span> <span class=\\"token operator\\">||</span> 
    <span class=\\"token punctuation\\">(</span>evt<span class=\\"token punctuation\\">.</span>type <span class=\\"token operator\\">===</span> <span class=\\"token string\\">'keydown'</span> <span class=\\"token operator\\">&amp;&amp;</span> evt<span class=\\"token punctuation\\">.</span>key <span class=\\"token operator\\">===</span> <span class=\\"token string\\">'Enter'</span><span class=\\"token punctuation\\">)</span>
  <span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>
    <span class=\\"token comment\\">// ...handle it the same way</span>
  <span class=\\"token punctuation\\">}</span>
<span class=\\"token punctuation\\">}</span>

<span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">&lt;</span>button onClick<span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">{</span>handleButtonEvent<span class=\\"token punctuation\\">}</span> onKeyDown<span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">{</span>handleButtonEvent<span class=\\"token punctuation\\">}</span><span class=\\"token operator\\">></span>Clicky<span class=\\"token operator\\">&lt;</span><span class=\\"token operator\\">/</span>button<span class=\\"token operator\\">></span></code></pre><h2 id=\\"test-is-different-than-browser-testing-keyboard-handler-in-test\\">Testing Keyboard Handler in Test</h2><p>Testing-library will allow you to query the elements in the DOM and interact with them. They <a href=\\"https://testing-library.com/docs/guide-which-query/\\">prefer</a> using <code>getByRole</code>.
You can learn what the <a href=\\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques#Roles\\">accessibility roles are</a> and the usage of <code>getByRole</code> will return the options for you upon a test failure.  It’s pretty great.</p><p>Let’s also make sure to focus it first, <em>then</em> press enter. Only then will we actuate the button and call the handler.</p><p>For this button:</p><pre><code class=\\"language-javascript\\"><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">MyButton</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">props</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>
  <span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">&lt;</span>button onClick<span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">{</span>props<span class=\\"token punctuation\\">.</span>onClick<span class=\\"token punctuation\\">}</span> onKeyDown<span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">{</span>props<span class=\\"token punctuation\\">.</span>onClick<span class=\\"token punctuation\\">}</span><span class=\\"token operator\\">></span>Clicky<span class=\\"token operator\\">&lt;</span><span class=\\"token operator\\">/</span>button<span class=\\"token operator\\">></span>
<span class=\\"token punctuation\\">}</span></code></pre><p>The test might look like:</p><pre><code class=\\"language-javascript\\"><span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">{</span> fireEvent<span class=\\"token punctuation\\">,</span> screen <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'@testing-library/dom'</span>

<span class=\\"token function\\">it</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'calls the handler'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=></span> <span class=\\"token punctuation\\">{</span>
  <span class=\\"token keyword\\">const</span> handler <span class=\\"token operator\\">=</span> jest<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">fn</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>

  <span class=\\"token function\\">render</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&lt;</span>MyButton onClick<span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">{</span>handler<span class=\\"token punctuation\\">}</span> <span class=\\"token operator\\">/</span><span class=\\"token operator\\">></span><span class=\\"token punctuation\\">)</span>
  <span class=\\"token keyword\\">const</span> button <span class=\\"token operator\\">=</span> screen<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getbyRole</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'button'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span> name<span class=\\"token operator\\">:</span> <span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">Clicky</span><span class=\\"token regex-delimiter\\">/</span></span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>
  button<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">focus</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>
  fireEvent<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">keyDown</span><span class=\\"token punctuation\\">(</span>button<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span> key<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'Enter'</span><span class=\\"token punctuation\\">,</span> code<span class=\\"token operator\\">:</span> <span class=\\"token string\\">'Enter'</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>
  <span class=\\"token function\\">expect</span><span class=\\"token punctuation\\">(</span>handler<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toHaveBeenCalled</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>
<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span></code></pre><p>“calls the handler” isn’t a very strong assertion, but you get the idea. Assertions on your logic or the DOM state will be better.</p><p>Well, that should do it. </p><p>What are the other ways that you’ve found to actuate a button in test with the enter key?</p></description>
  </item>

  <item>
    <link>https://jaketrent.com/post/prefer-action</link>
    <guid isPermaLink=\\"true\\">https://jaketrent.com/post/prefer-action</guid>
    <pubDate>2020-11-28</pubDate>
    <title>Prefer Action</title>
    <description><p>Ideas come and go. Act on them now or (quite possibly) never.</p><div><!--more-->
</div><p>Advice to self:</p><p>Strike while the idea is hot. (That’s a good Jim Rohn’ism I picked up.) When it comes to you in a flash, you might remark to yourself how great the idea is. But it will leave just as quickly if you do nothing about it.</p><p>Our emotions can be helpful to us. We can encourage positive emotion, which will encourage positive thoughts, which we can translate to positive action.</p><p>I love the empowering idea that we are agents in our own lives. We get to decide what we will do and be. We can do many things of our own free will.</p><p>Let reality be the dream killer. Better than wasting your time killing your own ideas. Act to bring them to fruition. Some won’t work out, but some will. It takes so little to kill an idea. We can easily convince ourselves it’s not worth it, doable, easy, or whatever. Be a builder, and believe in some ideas, and get them off the ground.</p><p>Worry less about the future and whether you’re making the right decision. If you’re going forward trying to make good decisions, that’s exactly what will happen. Your good desires will lead to good actions and then good outcomes.</p></description>
  </item>

  <item>
    <link>https://jaketrent.com/post/rerender-defaultvalue-value-change</link>
    <guid isPermaLink=\\"true\\">https://jaketrent.com/post/rerender-defaultvalue-value-change</guid>
    <pubDate>2020-11-12</pubDate>
    <title>Re-render DefaultValue when Value Changes in React</title>
    <description><p>Here’s a method to re-render a React input when its defaultValue prop changes.</p><div><!--more-->
</div><h2 id=\\"why-update-defaultvalue\\">Why Update defaultValue</h2><p><code>defaultValue</code> is meant to be uncontrolled. So, why would you want to control it? </p><p><code>defaultValue</code> is supposed to allow an <code>input</code> to receive some starting data but then React usually will forget that it was ever set. Why reset it?</p><p>The best case I have found is in making custom input widgets – most recently a combobox. Instead of using a native <code>select</code> tag, which would be great too, I’m using <code>button</code>, <code>label</code> and <code>div</code>.  But I also want my custom widget to be backed by an <code>input</code> tag as well. This will allow it to be submittable in a regular ‘ol form. And in this case, I want my combobox to be controlled, but I essentially just want data to flow into the <code>input</code> field. I would just use <code>value</code>, but then React complains that there’s a <code>value</code> prop without a corresponding <code>onChange</code> prop. So, I’m trying to get around that.</p><h2 id=\\"why-update-defaultvalue-tell-react-to-update\\">Tell React to Update</h2><p>React will never update the <code>input</code> tag if the value passed to <code>defaultValue</code> changes. It was meant to be a default/starting value only, after all.</p><p>To force it to update, we’ll surround the <code>input</code> with a containing tag – a generic <code>div</code>.  We’ll give that <code>div</code> a <code>key</code> prop and set its value to the same value as we passed to <code>defaultValue</code>.  </p><p>(Make sure that the <code>key</code> goes on the parent/container element, not on the <code>input</code> itself. If the <code>key</code> goes on the <code>input</code>, you’ll get React rendering a new <code>input</code> for each value.)</p><p>Now, when the key updates, React will re-render the container and its descendant child, the <code>input</code>.  Voila!</p><p>Some potential sample code:</p><pre><code class=\\"language-undefined\\"><span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">[</span>value<span class=\\"token punctuation\\">,</span> setValue<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token function\\">useState</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'someValue'</span><span class=\\"token punctuation\\">)</span>
<span class=\\"token comment\\">// setValue is called elsewhere in the custom component</span>

<span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">(</span>
  <span class=\\"token operator\\">&lt;</span>div key<span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">{</span>value<span class=\\"token punctuation\\">}</span><span class=\\"token operator\\">></span>
    <span class=\\"token operator\\">&lt;</span>input defaultValue<span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">{</span>value<span class=\\"token punctuation\\">}</span> <span class=\\"token operator\\">/</span><span class=\\"token operator\\">></span>
  <span class=\\"token operator\\">&lt;</span><span class=\\"token operator\\">/</span>div<span class=\\"token operator\\">></span>
<span class=\\"token punctuation\\">)</span></code></pre><p>Any other ways you’ve approached this?</p></description>
  </item>

  <item>
    <link>https://jaketrent.com/post/search-replace-multiple-files-macos</link>
    <guid isPermaLink=\\"true\\">https://jaketrent.com/post/search-replace-multiple-files-macos</guid>
    <pubDate>2020-10-5</pubDate>
    <title>Find and Replace Over Multiple Files in the Shell in MacOS</title>
    <description><p>This is a shell command to find and replace over multiple files recursively in MacOS.</p><div><!--more-->
</div><p>This is <a href=\\"https://stackoverflow.com/a/17308739\\">surprisingly</a> difficult to figure out how to do. There are many options an nuances. This may work for your particular OS version, Terminal, Shell, and installed tools.  Lol, what a disclaimer!</p><p>Anywho, the command that works for me at this moment is:</p><pre><code class=\\"language-undefined\\">fd <span class=\\"token operator\\">-</span><span class=\\"token number\\">0</span> <span class=\\"token keyword\\">package</span><span class=\\"token punctuation\\">.</span>json <span class=\\"token operator\\">**</span> <span class=\\"token operator\\">|</span> xargs <span class=\\"token operator\\">-</span><span class=\\"token number\\">0</span> sed <span class=\\"token operator\\">-</span>i <span class=\\"token string\\">\\"\\"</span> <span class=\\"token string\\">\\"s/npm run/yarn/g\\"</span></code></pre><p>Let’s break it down:</p><ul><li><code>fd</code> is an <a href=\\"https://github.com/sharkdp/fd\\">alternative</a> to the unix <code>find</code> command. It looks for files that match the name given.</li><li><code>package.json</code> is the name of the file we’re looking for.</li><li><code>-0</code> is an option to <code>fd</code> that preps it for <code>xargs</code> later. It puts results on one line, separating them with NULL characters.</li><li><code>**</code> tells <code>fd</code> to checkout all the directories listed at this level. It’s recursive by default.</li><li><code>|</code> is a pipe that connects and forwards commands.</li><li><code>xargs</code> is a command that takes the output of the previous command and appends it to the next command</li><li><code>-0</code> has the same purpose as the last <code>-0</code> and makes the connected commands compatible.</li><li><code>sed</code> is a string replace command. The options and args that follow feed into it</li><li><code>-i</code> edits files in place. The <code>&quot;&quot;</code> empty string that follows indicates that no backup to the edited files should be made.</li><li><code>s/npm run/yarn/g</code> This is the string to find (indicated by<code>s/</code>) and replace (ie, change “npm run” for “yarn”) globally (indicated by the <code>/g</code>).</li></ul><p>So there it is.  Save that one to your cranium.</p><p>While searching for how to perform this command, I came across a great tool that will expose the <code>man</code> pages for much of this in a combined web gui, called <a href=\\"https://explainshell.com\\">explainshell.com</a>.  Pretty cool!</p><p>What other solutions for search and replace have you used on MacOS?</p></description>
  </item>

  <item>
    <link>https://jaketrent.com/post/set-colors-vim</link>
    <guid isPermaLink=\\"true\\">https://jaketrent.com/post/set-colors-vim</guid>
    <pubDate>2020-10-2</pubDate>
    <title>Set Colors in Vim</title>
    <description><p>Here’s are some methods on changing colors for the UI in Vim.</p><div><!--more-->
</div><h2 id=\\"color-one-offs-in-.vimrc\\">Color one-offs in .vimrc</h2><p>Most of the colors you have will probably come from a theme. I’ve been using <a href=\\"https://draculatheme.com/vim\\">Dracula</a> lately, and it’s great.</p><p>But if you want to make one-off color adjustments yourself, you can stick those in your <code>.vimrc</code> file.</p><h2 id=\\"color-one-offs-in-.vimrc-highlight-command\\">Highlight command</h2><p>The <code>highlight</code> command, or <code>hi</code> for short, is the key to setting colors on things. You set highlights on groups, by <code>group-name</code>.</p><p>In <code>.vimrc</code>, you’d start with something like:</p><pre><code class=\\"language-undefined\\">hi LineNr </code></pre><p>Where <code>LineNr</code> is the group name to target. But the command is incomplete.  There are no colors set yet. Let’s set some foreground (fg) and background (bg) colors.</p><h2 id=\\"color-one-offs-in-.vimrc-color-codes-depend-on-terminal-or-app\\">Color codes depend on Terminal or App</h2><p>You can run vim in a few different ways. The most basic categories are to run vim through your terminal app (eg, zsh from iTerm) or through a standalone app (eg, macvim). You have to set colors for both.</p><pre><code class=\\"language-undefined\\">hi LineNr ctermfg<span class=\\"token operator\\">=</span> ctermbg<span class=\\"token operator\\">=</span> guifg<span class=\\"token operator\\">=</span> guibg<span class=\\"token operator\\">=</span></code></pre><p>Usually you make cterm (for terminal) match gui (for standalone app) so that the colors are the same no matter how you run. But when you define the colors, the coding for each is different. What a pain!</p><p>Terminal colors are specified in a 256 ANSI color scheme. GUI colors are specified in my modern hex colors.</p><p>To finally finish the <code>LineNr</code> coloring, let’s do a:</p><pre><code class=\\"language-undefined\\">hi LineNr ctermfg<span class=\\"token operator\\">=</span><span class=\\"token number\\">59</span> ctermbg<span class=\\"token operator\\">=</span><span class=\\"token number\\">222</span> guifg<span class=\\"token operator\\">=</span>#ffb86c guibg<span class=\\"token operator\\">=</span>#<span class=\\"token number\\">282</span>a36</code></pre><p>There are other options you can learn in the help file via <code>:h hi</code>.</p><h2 id=\\"color-one-offs-in-.vimrc-reload-using-latest-.vimrc\\">Reload using latest .vimrc</h2><p>After you save, you can see the colors applied in the current editor without restarting vim, using:</p><pre><code class=\\"language-undefined\\"><span class=\\"token operator\\">:</span>source <span class=\\"token operator\\">~</span><span class=\\"token operator\\">/</span><span class=\\"token punctuation\\">.</span>vimrc</code></pre><h2 id=\\"color-one-offs-in-.vimrc-see-current-colors-and-things-to-color\\">See current colors and things to color</h2><p>If you want to learn the other color group names or see all the current color scheme, you can use the command:</p><pre><code class=\\"language-undefined\\"><span class=\\"token operator\\">:</span>hi</code></pre><p>The great thing is that the group-names that are standard to vim <em>and</em> those that your plugins add are all available to see here. </p><p>How else do you like to set colors in vim?</p></description>
  </item>

  <item>
    <link>https://jaketrent.com/post/respect-os-dark-mode-javascript</link>
    <guid isPermaLink=\\"true\\">https://jaketrent.com/post/respect-os-dark-mode-javascript</guid>
    <pubDate>2020-10-1</pubDate>
    <title>Respect OS Dark Mode in JavaScript</title>
    <description><p>Here are a couple methods to the OS dark theme within JavaScript. </p><div><!--more-->
</div><p>Respecting the user’s OS theme color is something that more websites should do. It’s magical when it works. </p><p>How many of you sit for hours looking at a dark terminal window while the bright white browser window blazes next to it, burning a white spot into your vision? What if they both matched based on the OS preference!</p><p><img src=\\"https://i.imgur.com/fl4i44S.jpg\\" alt=\\"macos color preference\\"/></p><h2 id=\\"css-dark-mode\\">CSS Dark Mode</h2><p>CSS supports color mode changing through <a href=\\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme\\"><code>prefers-color-scheme</code></a>.  It’s accomplished as a media query. For instance, here’s how you’d default to a light theme background and then support a dark theme as well:</p><pre><code class=\\"language-css\\"><span class=\\"token operator\\">:</span>root <span class=\\"token punctuation\\">{</span>
  <span class=\\"token operator\\">--</span>bg<span class=\\"token operator\\">:</span> #<span class=\\"token constant\\">F0F3F5</span><span class=\\"token punctuation\\">;</span>
<span class=\\"token punctuation\\">}</span>

@<span class=\\"token function\\">media</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">prefers<span class=\\"token operator\\">-</span>color<span class=\\"token operator\\">-</span>scheme<span class=\\"token operator\\">:</span> dark</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>
  <span class=\\"token operator\\">:</span>root <span class=\\"token punctuation\\">{</span>
    <span class=\\"token operator\\">--</span>bg<span class=\\"token operator\\">:</span> #<span class=\\"token number\\">181</span>C20<span class=\\"token punctuation\\">;</span>
  <span class=\\"token punctuation\\">}</span>
<span class=\\"token punctuation\\">}</span>

body <span class=\\"token punctuation\\">{</span>
  background<span class=\\"token operator\\">-</span>color<span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">var</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">--</span>bg<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>
<span class=\\"token punctuation\\">}</span></code></pre><h2 id=\\"css-dark-mode-prefers-color-scheme-in-javascript\\">prefers-color-scheme in JavaScript</h2><p>Now, how might we get that in vanilla JavaScript?  Since <a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia\\"><code>window.matchMedia</code></a> exists for querying media queries, we can do a similar query:</p><pre><code class=\\"language-js\\"><span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">{</span> canUseDOM <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'exenv'</span>

<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>canUseDOM<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>
  <span class=\\"token keyword\\">const</span> prefersDark <span class=\\"token operator\\">=</span>
    window<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">matchMedia</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'(prefers-color-scheme: dark)'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>matches

  document<span class=\\"token punctuation\\">.</span>body<span class=\\"token punctuation\\">.</span>style<span class=\\"token punctuation\\">.</span>background <span class=\\"token operator\\">=</span> prefersDark <span class=\\"token operator\\">?</span> <span class=\\"token string\\">'#181C20'</span> <span class=\\"token operator\\">:</span> <span class=\\"token string\\">'#F0F3F5'</span>
<span class=\\"token punctuation\\">}</span></code></pre><p>We only do a <code>canUseDOM</code> check so that our JS remains server-renderable. It might be overkill for this example.</p><h2 id=\\"css-dark-mode-prefers-color-scheme-in-react\\">prefers-color-scheme in React</h2><p>We could do this in React as well with something like a Theme provider.</p><pre><code class=\\"language-js\\"><span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">{</span> canUseDOM <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'exenv'</span>
<span class=\\"token keyword\\">import</span> <span class=\\"token operator\\">*</span> <span class=\\"token keyword\\">as</span> React <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'react'</span>
<span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">{</span> render <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'react-dom'</span>

<span class=\\"token keyword\\">const</span> prefersDark <span class=\\"token operator\\">=</span>
  canUseDOM <span class=\\"token operator\\">&amp;&amp;</span> window<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">matchMedia</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'(prefers-color-scheme: dark)'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>matches
<span class=\\"token keyword\\">const</span> ThemeContext <span class=\\"token operator\\">=</span> React<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">createContext</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span> name<span class=\\"token operator\\">:</span> prefersDark <span class=\\"token operator\\">?</span> <span class=\\"token string\\">'dark'</span> <span class=\\"token operator\\">:</span> <span class=\\"token string\\">'light'</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>

<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">Parent</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>
  <span class=\\"token operator\\">&lt;</span>ThemeContext<span class=\\"token punctuation\\">.</span>Provider<span class=\\"token operator\\">></span>
    <span class=\\"token operator\\">&lt;</span>Child <span class=\\"token operator\\">/</span><span class=\\"token operator\\">></span>
  <span class=\\"token operator\\">&lt;</span><span class=\\"token operator\\">/</span>ThemeContext<span class=\\"token punctuation\\">.</span>Provider<span class=\\"token operator\\">></span>
<span class=\\"token punctuation\\">}</span>

<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">Child</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>
  <span class=\\"token keyword\\">const</span> theme <span class=\\"token operator\\">=</span> React<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">useContext</span><span class=\\"token punctuation\\">(</span>ThemeContext<span class=\\"token punctuation\\">)</span>

  <span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">&lt;</span>div style<span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">{</span>
    backgroundColor<span class=\\"token operator\\">:</span> theme<span class=\\"token punctuation\\">.</span>name <span class=\\"token operator\\">===</span> <span class=\\"token string\\">'dark'</span> <span class=\\"token operator\\">?</span> <span class=\\"token string\\">'#181C20'</span> <span class=\\"token operator\\">:</span> <span class=\\"token string\\">'#F0F3F5'</span>
  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">}</span><span class=\\"token operator\\">></span><span class=\\"token operator\\">&lt;</span><span class=\\"token operator\\">/</span>div<span class=\\"token operator\\">></span>
<span class=\\"token punctuation\\">}</span>

<span class=\\"token function\\">render</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&lt;</span>Parent <span class=\\"token operator\\">/</span><span class=\\"token operator\\">></span><span class=\\"token punctuation\\">,</span> document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getElementById</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'app'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span></code></pre><p>How else have you respected this value in JavaScript?  </p></description>
  </item>

  <item>
    <link>https://jaketrent.com/post/prevent-children-filling-css-grid-cell</link>
    <guid isPermaLink=\\"true\\">https://jaketrent.com/post/prevent-children-filling-css-grid-cell</guid>
    <pubDate>2020-9-18</pubDate>
    <title>Prevent Children from Filling CSS Grid Cell</title>
    <description><p>Here’s a way to keep the contents of a cell in a CSS grid layout from filling the whole width of the cell.</p><div><!--more-->
</div><h2 id=\\"columns-are-easy\\">Columns are easy</h2><p>Whip out a grid. It’ll solve your problems. They’re easy to start and powerfully affect your layout. </p><pre><code class=\\"language-css\\"><span class=\\"token punctuation\\">.</span>container <span class=\\"token punctuation\\">{</span>
  display<span class=\\"token operator\\">:</span> grid<span class=\\"token punctuation\\">;</span>
  grid<span class=\\"token operator\\">-</span>template<span class=\\"token operator\\">-</span>columns<span class=\\"token operator\\">:</span> <span class=\\"token number\\">1</span>fr <span class=\\"token number\\">1</span>fr<span class=\\"token punctuation\\">;</span>
<span class=\\"token punctuation\\">}</span></code></pre><p>I’ve got two equal columns, and I’m ready to rumble. </p><p><img src=\\"https://i.imgur.com/glX9vRx.png\\" alt=\\"equal columns\\"/></p><h2 id=\\"columns-are-easy-children-filling-the-cell\\">Children filling the cell</h2><p>But now when I put something in the grid – something that’s <code>inline-block</code> and shouldn’t be expanding to fill the cell – like a <code>&lt;button /&gt;</code>, the buttons are way too wide.  They’re taking up the entire cell width.</p><pre><code class=\\"language-css\\">button <span class=\\"token punctuation\\">{</span>
  display<span class=\\"token operator\\">:</span> inline<span class=\\"token operator\\">-</span>block<span class=\\"token punctuation\\">;</span>
<span class=\\"token punctuation\\">}</span></code></pre><p><img src=\\"https://i.imgur.com/1zJTQKL.png\\" alt=\\"children filling cell width\\"/></p><p>This is weird and undesirable because each of these buttons should only get as wide as they need to be in order to fit their own button text. But they’re all equally huge now.</p><h2 id=\\"columns-are-easy-justify-the-items\\">Justify the items</h2><p>This can all be remedied with a fairly versatile and widely used CSS attribute that I somehow have never used until this use case.</p><p>It is: <a href=\\"https://developer.mozilla.org/en-US/docs/Web/CSS/justify-items\\"><code>justify-items</code></a>.  By default when applied to grids, the value is <code>stretch</code>. That seems to make sense based on what we’ve observed as the behavior.</p><p>Let’s switch that up for <code>justify-items: left</code>, and we get buttons just the size that they need to be and still aligned within their grid column boundaries:</p><pre><code class=\\"language-css\\"><span class=\\"token punctuation\\">.</span>container <span class=\\"token punctuation\\">{</span>
  display<span class=\\"token operator\\">:</span> grid<span class=\\"token punctuation\\">;</span>
  grid<span class=\\"token operator\\">-</span>template<span class=\\"token operator\\">-</span>columns<span class=\\"token operator\\">:</span> <span class=\\"token number\\">1</span>fr <span class=\\"token number\\">1</span>fr<span class=\\"token punctuation\\">;</span>
  justify<span class=\\"token operator\\">-</span>items<span class=\\"token operator\\">:</span> left<span class=\\"token punctuation\\">;</span>
<span class=\\"token punctuation\\">}</span></code></pre><p><img src=\\"https://i.imgur.com/SxHAyG3.png\\" alt=\\"justify-items: left for grid cell children\\"/></p><p>Much better!  Do you have other methods that you use for solving this problem?</p><div><iframe src=\\"https://codesandbox.io/embed/nifty-clarke-f1nk0?fontsize=12&hidenavigation=1&theme=light\\"
     style=\\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\\"
     title=\\"nifty-clarke-f1nk0\\"
     allow=\\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\\"
     sandbox=\\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\\"
   ></iframe>



</div></description>
  </item>

  </rss>
"
`;
